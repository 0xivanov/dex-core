/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { DexToken, DexTokenInterface } from "../../contracts/DexToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f446578546f6b656e0000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f544b4e4e0000000000000000000000000000000000000000000000000000000081525081600390816200008f919062000324565b508060049081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b611618806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c578063a0712d6811610066578063a0712d681461023c578063a457c2d714610258578063a9059cbb14610288578063dd62ed3e146102b8576100cf565b806339509351146101be57806370a08231146101ee57806395d89b411461021e576100cf565b806301ffc9a7146100d457806306fdde0314610104578063095ea7b31461012257806318160ddd1461015257806323b872dd14610170578063313ce567146101a0575b600080fd5b6100ee60048036038101906100e99190610da4565b6102e8565b6040516100fb9190610dec565b60405180910390f35b61010c610362565b6040516101199190610e97565b60405180910390f35b61013c60048036038101906101379190610f4d565b6103f4565b6040516101499190610dec565b60405180910390f35b61015a610417565b6040516101679190610f9c565b60405180910390f35b61018a60048036038101906101859190610fb7565b610421565b6040516101979190610dec565b60405180910390f35b6101a8610450565b6040516101b59190611026565b60405180910390f35b6101d860048036038101906101d39190610f4d565b610459565b6040516101e59190610dec565b60405180910390f35b61020860048036038101906102039190611041565b610490565b6040516102159190610f9c565b60405180910390f35b6102266104d8565b6040516102339190610e97565b60405180910390f35b6102566004803603810190610251919061106e565b61056a565b005b610272600480360381019061026d9190610f4d565b610577565b60405161027f9190610dec565b60405180910390f35b6102a2600480360381019061029d9190610f4d565b6105ee565b6040516102af9190610dec565b60405180910390f35b6102d260048036038101906102cd919061109b565b610611565b6040516102df9190610f9c565b60405180910390f35b60007f36372b07000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061035b575061035a82610698565b5b9050919050565b6060600380546103719061110a565b80601f016020809104026020016040519081016040528092919081815260200182805461039d9061110a565b80156103ea5780601f106103bf576101008083540402835291602001916103ea565b820191906000526020600020905b8154815290600101906020018083116103cd57829003601f168201915b5050505050905090565b6000806103ff610702565b905061040c81858561070a565b600191505092915050565b6000600254905090565b60008061042c610702565b90506104398582856108d3565b61044485858561095f565b60019150509392505050565b60006012905090565b600080610464610702565b90506104858185856104768589610611565b610480919061116a565b61070a565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104e79061110a565b80601f01602080910402602001604051908101604052809291908181526020018280546105139061110a565b80156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b5050505050905090565b6105743382610bde565b50565b600080610582610702565b905060006105908286610611565b9050838110156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90611210565b60405180910390fd5b6105e2828686840361070a565b60019250505092915050565b6000806105f9610702565b905061060681858561095f565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610779576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610770906112a2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611334565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108c69190610f9c565b60405180910390a3505050565b60006108df8484610611565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610959578181101561094b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610942906113a0565b60405180910390fd5b610958848484840361070a565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590611432565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a34906114c4565b60405180910390fd5b610a48838383610d3d565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac590611556565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b61919061116a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bc59190610f9c565b60405180910390a3610bd8848484610d42565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c44906115c2565b60405180910390fd5b610c5960008383610d3d565b8060026000828254610c6b919061116a565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cc0919061116a565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d259190610f9c565b60405180910390a3610d3960008383610d42565b5050565b505050565b505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d8181610d4c565b8114610d8c57600080fd5b50565b600081359050610d9e81610d78565b92915050565b600060208284031215610dba57610db9610d47565b5b6000610dc884828501610d8f565b91505092915050565b60008115159050919050565b610de681610dd1565b82525050565b6000602082019050610e016000830184610ddd565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e41578082015181840152602081019050610e26565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e6982610e07565b610e738185610e12565b9350610e83818560208601610e23565b610e8c81610e4d565b840191505092915050565b60006020820190508181036000830152610eb18184610e5e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ee482610eb9565b9050919050565b610ef481610ed9565b8114610eff57600080fd5b50565b600081359050610f1181610eeb565b92915050565b6000819050919050565b610f2a81610f17565b8114610f3557600080fd5b50565b600081359050610f4781610f21565b92915050565b60008060408385031215610f6457610f63610d47565b5b6000610f7285828601610f02565b9250506020610f8385828601610f38565b9150509250929050565b610f9681610f17565b82525050565b6000602082019050610fb16000830184610f8d565b92915050565b600080600060608486031215610fd057610fcf610d47565b5b6000610fde86828701610f02565b9350506020610fef86828701610f02565b925050604061100086828701610f38565b9150509250925092565b600060ff82169050919050565b6110208161100a565b82525050565b600060208201905061103b6000830184611017565b92915050565b60006020828403121561105757611056610d47565b5b600061106584828501610f02565b91505092915050565b60006020828403121561108457611083610d47565b5b600061109284828501610f38565b91505092915050565b600080604083850312156110b2576110b1610d47565b5b60006110c085828601610f02565b92505060206110d185828601610f02565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061112257607f821691505b602082108103611135576111346110db565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061117582610f17565b915061118083610f17565b92508282019050808211156111985761119761113b565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006111fa602583610e12565b91506112058261119e565b604082019050919050565b60006020820190508181036000830152611229816111ed565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061128c602483610e12565b915061129782611230565b604082019050919050565b600060208201905081810360008301526112bb8161127f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061131e602283610e12565b9150611329826112c2565b604082019050919050565b6000602082019050818103600083015261134d81611311565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061138a601d83610e12565b915061139582611354565b602082019050919050565b600060208201905081810360008301526113b98161137d565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061141c602583610e12565b9150611427826113c0565b604082019050919050565b6000602082019050818103600083015261144b8161140f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006114ae602383610e12565b91506114b982611452565b604082019050919050565b600060208201905081810360008301526114dd816114a1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611540602683610e12565b915061154b826114e4565b604082019050919050565b6000602082019050818103600083015261156f81611533565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006115ac601f83610e12565b91506115b782611576565b602082019050919050565b600060208201905081810360008301526115db8161159f565b905091905056fea26469706673582212205998452e73c4b9f12bd57286e6836f61edd2ecf402097388c5a7574fab52cf8164736f6c63430008110033";

type DexTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DexToken__factory extends ContractFactory {
  constructor(...args: DexTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DexToken> {
    return super.deploy(overrides || {}) as Promise<DexToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DexToken {
    return super.attach(address) as DexToken;
  }
  override connect(signer: Signer): DexToken__factory {
    return super.connect(signer) as DexToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexTokenInterface {
    return new utils.Interface(_abi) as DexTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexToken {
    return new Contract(address, _abi, signerOrProvider) as DexToken;
  }
}
